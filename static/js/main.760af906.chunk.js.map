{"version":3,"sources":["logo.svg","components/coin/coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/ExchangeHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Td","styled","td","Coin","props","balanceDisplay","showBalance","balance","name","ticker","price","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","amount","handleShowBalance","Img","img","AppHeader","header","H1","h1","ExchangeHeader","src","logo","alt","Component","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","newPrice","newCoinData","values","newValues","oldValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.760af906.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst Td= styled.td`\r\nbackground-color: #1dc254;\r\n   border: 1px solid;\r\n   width: 25vh;\r\n   color:white;\r\n`;\r\nexport default function Coin (props) {\r\n   const handleClick=(event)=>{\r\n    event.preventDefault();\r\n    props.handleRefresh(props.tickerId);\r\n    \r\n  }\r\n    \r\n      const balanceDisplay= props.showBalance ? <Td>{props.balance}</Td>:null;\r\n      \r\n        return(        \r\n           <tr> \r\n            <Td> {props.name}   </Td> \r\n            <Td> {props.ticker} </Td>\r\n                 {balanceDisplay}    \r\n            <Td>${props.price}  </Td>\r\n            <Td>\r\n               <form action='#' method= 'POST'>\r\n              <button onClick= {handleClick}>refresh</button>\r\n              </form>  \r\n            </Td>\r\n          </tr>\r\n        ) ;   \r\n    \r\n}\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    \r\n    price: PropTypes.number.isRequired\r\n  };\r\n","import React from 'react';\r\nimport Coin from '../coin/coin';\r\nimport styled from 'styled-components'\r\n\r\nconst Table= styled.table`\r\nmargin: 50px auto 50px auto ;\r\n    display: inline-block;\r\n    font-size: 1.4rem;\r\n`;\r\n\r\nexport default function CoinList (props) {\r\n    \r\n        const balanceDisplay= props.showBalance ? <th>Balance</th>:null;\r\n        return (\r\n            <Table>\r\n          <thead>\r\n              <tr>\r\n                  <th>Name</th>\r\n                  <th>Ticker</th>\r\n                  {balanceDisplay}\r\n                  <th>Price</th>\r\n                  <th>Action</th>\r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n          {props.coinData.map(({key, name, ticker,balance, price}) =>  (\r\n           <Coin key={key}\r\n           showBalance={props.showBalance }\r\n           handleRefresh={props.handleRefresh}\r\n            name={name} \r\n            ticker={ticker} \r\n            balance={balance}\r\n            price={price} \r\n            tickerId={key}\r\n            />\r\n           ))}  \r\n         </tbody>\r\n      </Table>\r\n    \r\n        );\r\n    \r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\nfont-size: 2rem;\r\ntext-align:left;\r\npadding: 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\nexport default function AccountBalance (props)  {\r\n    \r\n        const buttonText=     props.showBalance ? 'hide balance' : 'show balance';\r\n        const balanceDisplay= props.showBalance ? <>Balance: $ {props.amount} </> :null;\r\n\r\n        return (  \r\n            <Section>\r\n                    \r\n                        {balanceDisplay}    \r\n                    \r\n                    \r\n                      <button onClick= {props.handleShowBalance} > {buttonText}</button>\r\n                                        \r\n            </Section>\r\n        ) ;   \r\n          \r\n}\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n  };\r\n\r\n  \r\n","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport styled from 'styled-components'\r\n\r\nconst Img= styled.img`\r\nheight: 8rem;\r\n    pointer-events: none;\r\n    @media (prefers-reduced-motion: no-preference) {\r\n         {\r\n          animation: App-logo-spin infinite 20s linear;\r\n        }\r\n      }\r\n      @keyframes App-logo-spin {\r\n        from {\r\n          transform: rotate(0deg);\r\n        }\r\n        to {\r\n          transform: rotate(360deg);\r\n        }\r\n    }   \r\n`;\r\n const AppHeader= styled.header`\r\n background-color: #282c34;\r\n min-height: 20vh;\r\n display: flex;\r\n flex-direction: row;\r\n align-items: center;\r\n justify-content: center;\r\n color: white;\r\n `;\r\n\r\n const H1= styled.h1`\r\n font-size: 4rem;\r\n `;\r\n\r\nclass ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <AppHeader>\r\n            <Img src={logo}  alt=\"logo\" />\r\n              <H1 >\r\n                Coin Exchange\r\n              </H1> \r\n            </AppHeader>          \r\n        );\r\n    }\r\n}\r\nexport default ExchangeHeader;","import React,{useState,useEffect} from 'react';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst Div= styled.div`\r\ntext-align: center;\r\n  background-color: #61dafb;\r\n  color: white;\r\n`;\r\nconst COINS_COUNT=10;\r\nconst formatPrice= price =>parseFloat(Number(price).toFixed(4));\r\nexport default  function App (props)  {\r\n  const [balance,setBalance]         = useState(10000);\r\n  const [showBalance,setShowBalance] = useState(false);\r\n  const [coinData,setCoinData]       = useState([]);\r\n\r\n\r\n const   componentDidMount= async()=>{\r\n    const response = await    axios.get('https://api.coinpaprika.com/v1/coins')\r\n    const coinIds = response.data.slice(0,COINS_COUNT).map(coin=> coin.id); \r\n    const tickerUrl='https://api.coinpaprika.com/v1/tickers/';\r\n    const promises=coinIds.map(id =>  axios.get(tickerUrl+id));\r\n    const coinData=  await   Promise.all(promises) \r\n    const coinPriceData =coinData.map(function(response) {\r\n      const coin= response.data;\r\n      return{\r\n          key:coin.id,\r\n        name:coin.name,\r\n        ticker:coin.symbol,\r\n        balance:0,\r\n        price:formatPrice(coin.quotes.USD.price)\r\n        };\r\n       });\r\n   \r\n    setCoinData(coinPriceData);\r\n   }\r\n   useEffect(function(){\r\n    if(coinData.length===0){\r\n      componentDidMount();\r\n    } \r\n   });\r\n\r\n   const handleShowBalance= ()=>{\r\n  \r\n   setShowBalance(oldValues=>!oldValues);\r\n     }\r\n   const handleRefresh=async(valueChangeId)=>{\r\n  const response =await axios.get(`https://api.coinpaprika.com/v1/tickers/${valueChangeId}`)\r\n  debugger;\r\n  const newPrice =formatPrice(response.data.quotes.USD.price); \r\n  \r\n  const newCoinData =coinData.map(function(values) {\r\n       let newValues={...values};\r\n       if(values.key===valueChangeId){\r\n          newValues.price=newPrice\r\n        }\r\n        return newValues;\r\n       });\r\n     setCoinData(newCoinData);\r\n      }; \r\n  return (\r\n    <Div>\r\n      <ExchangeHeader/>   \r\n      <AccountBalance amount={balance} \r\n                     showBalance={showBalance }\r\n                   handleShowBalance={handleShowBalance } />\r\n      <CoinList   coinData={coinData} \r\n                 showBalance={showBalance }\r\n                handleRefresh={handleRefresh}/>                      \r\n    </Div>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    \r\n  </React.StrictMode>,\r\n \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}